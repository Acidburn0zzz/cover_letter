#hero-unit.max-width
  %header.inner
    %a#project-1{ href: 'https://github.com/notalex/automux', target: '_blank' } automux
    %a#project-2{ href: 'https://github.com/notalex/vim-run-live', target: '_blank' } vim-run-live
    %h1.title Alex Johnson
    %h2.tagline Ruby Lore Master
    .phone
      08306746566
#container.max-width
  %section#main-content.inner
    :textile

      bq.  I have about 18 months of experience working on production level Rails applications. Most of my work has been around a single application which I have helped build up from its very inception.

      h3. "iKonverse":iKonverse

      iKonverse is a corporate collaboration platform based on ideas similar to Basecamp and Yammer. Its a multi-tenant application and hence can be used in different flavours. Some of its active tenants involve Dermatologists and Stock Traders.

      I worked in a team of 2 people with some guidance from a Chicago based Technical Advisor who also works for Groupon. Here are some of challenges that I faced:

      * Maintaining multiple backend server processes
      * Using HTML5 canvas for more performant animations
      * Managing multiple tenants
      * Different types of paid Groups with a wide range of configuration options
      * Converting email replies into relevant thread's comment

      There are tons of other things like _payment integration_, _Calendars_, _Polls_ and lots of front end javascript work that I have done in the application. The application is still under Beta and will see a lot of code before it sees its first launch.

      h3. Stuff that matters

      I understand that building web applications is something that most developers can do. It's the quality of work that differentiates talent. I hope to demonstrate mine through open source contributions.

      I also handle the hiring process for new Rails developers for my Company. Knowing web framework centric stuff is certainly important but I long for candidates who can understand simple design decisions like why use @public_send@ over @send@, write smaller well named methods or that Fat models are not the ultimate solution.

      I like to find passionate programmers who write code for their own needs too; who I can debate with over tools and technology.

      h3. What am I?

      One may deduce a lot about me by looking at my "dotfiles":dotfiles.

      h5. Self Learner

      Being from a non Computer Science background, I have learnt almost everything I know about Programming through books and blogs.

      I am better at self learning than sitting in traditional classrooms. I question a lot and usually end up frustating my teachers. For me, the key to understanding a technology is in the details.

      h5. Question Everything

      I understand that design patterns or style guides are important, but I prefer to know why am I using them? If you ask me to prefer @&&@ over @and@, I would also like to know that its because, @&&@can lead to lot more cleaner code due its precedence.

      h5. Obsessive Version Control Disorder

      I version control everything that I @touch@. I am very religious about commit message formats and atomic commits. I commit early and commit often. I also follow a specific Git branching model.

      h5. Refactoring and Tests

      If I do not understand my own code, I refactor it. Many a times I end up refactoring the existing code in order to accomodate a new feature. Thus, tests become an absolute necessity in my workflow. I even write specs for my vimscripts.

      h5. Automation Expert

      I try to find ways to automate most of my daily repetitive tasks.  I ensure that after switching on my machine, the next thing that I should expect is to write code. Things like logging into to the employee tracker, updating dotfiles or booting up the Rails environment should all be automated.

      h5. Polyglot Programmer

      My core strengths are *Ruby* and *Javascript*.

      I am good at regular expressions. I am aware of performance issues that certain patterns might cause and the ways around them.

      *Coffeescript* makes working with javascript more saner.  I find the *underscore.js* library quite useful as well. Functions like @debounce@ and @once@ are godsend.

      I have done a lot of front end work with *jQuery*.

      I know a decent amount of *Bash* scripting. The previous version of "automux":automux was written in "Bash":tmx. I had to abandon it due to lack of a Yaml parser for Bash.

      I am good at *Vimscript* too, though I doubt if its relevant here.

      h3. Who am I?

      I am an Electronics Engineer who has juggled with several different careers before getting into programming. I constantly strive to keep learning in order to make up for my lost years.

      [iKonverse]https://ikonverse.com
      [dotfiles]https://github.com/notalex/dotfiles
      [automux]https://github.com/notalex/automux
      [tmx]https://github.com/notalex/dotfiles/blob/master/.shortcuts/tmx
      [rts]http://en.wikipedia.org/wiki/Real-time_strategy

#footer.max-width
  %footer.inner
    .text
      This site is best viewed by a Programmer
    %a.source-link{ href: 'https://github.com/notalex/cover_letter', target: '_blank' } Source
